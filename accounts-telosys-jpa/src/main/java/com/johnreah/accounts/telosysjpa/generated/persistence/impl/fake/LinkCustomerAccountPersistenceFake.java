/*
 * Created on 2021-11-04 ( Date ISO 2021-11-04 - Time 13:31:50 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.4.0
 */
package com.johnreah.accounts.telosysjpa.generated.persistence.impl.fake;

import java.util.List;


import javax.inject.Named;

import com.johnreah.accounts.telosysjpa.generated.data.record.LinkCustomerAccountRecord;
import com.johnreah.accounts.telosysjpa.generated.persistence.LinkCustomerAccountPersistence;
import com.johnreah.accounts.telosysjpa.generated.persistence.impl.fake.commons.GenericFakeDAO;

/**
 * LinkCustomerAccount persistence service - FAKE implementation 
 * 
 * @author Telosys
 *
 */
@Named("LinkCustomerAccountPersistence")
public class LinkCustomerAccountPersistenceFake extends GenericFakeDAO<LinkCustomerAccountRecord> implements LinkCustomerAccountPersistence {

	/**
	 * Constructor
	 */
	public LinkCustomerAccountPersistenceFake() {
		super(LinkCustomerAccountRecord.class);
	}

	/**
	 * Creates a new bean instance and set its primary key value(s)
	 * 
	 * @param customerId
	 * @param accountId
	 * @return the new instance
	 */
	private LinkCustomerAccountRecord newInstanceWithPrimaryKey(Long customerId, Long accountId) {
		LinkCustomerAccountRecord record = new LinkCustomerAccountRecord();
        record.setCustomerId(customerId); 
        record.setAccountId(accountId); 
		return record;
	}

	//-------------------------------------------------------------------------------------
	// Generic DAO abstract methods implementations
	//-------------------------------------------------------------------------------------
	@Override
	protected String getKey(LinkCustomerAccountRecord record) {
		return buildKeyString(record.getCustomerId(), record.getAccountId());
	}
	
	@Override
	protected void setAutoIncrementedKey(LinkCustomerAccountRecord record, long value) {
		throw new IllegalStateException("Unexpected call to method 'setAutoIncrementedKey'");
	}

	//-------------------------------------------------------------------------------------
	// Persistence interface implementations
	//-------------------------------------------------------------------------------------
	@Override
	public long countAll() {
		return super.doCountAll();
	}
	
	@Override
	public LinkCustomerAccountRecord create(LinkCustomerAccountRecord record) {
		super.doCreate(record);
		return record;
	}

	@Override
	public boolean delete(LinkCustomerAccountRecord record) {
		return super.doDelete(record);
	}

	@Override
	public boolean deleteById(Long customerId, Long accountId) {
		LinkCustomerAccountRecord record = newInstanceWithPrimaryKey(customerId, accountId);
		return super.doDelete(record);
	}

	@Override
	public boolean exists(LinkCustomerAccountRecord record) {
		return super.doExists(record);
	}

	@Override
	public boolean exists(Long customerId, Long accountId) {
		LinkCustomerAccountRecord record = newInstanceWithPrimaryKey(customerId, accountId);
		return super.doExists(record);
	}

	@Override
	public List<LinkCustomerAccountRecord> findAll() {
		return super.doFindAll();
	}

	@Override
	public LinkCustomerAccountRecord findById(Long customerId, Long accountId) {
        LinkCustomerAccountRecord record = newInstanceWithPrimaryKey(customerId, accountId);
		return super.doFind(record);
	}

	@Override
	public LinkCustomerAccountRecord save(LinkCustomerAccountRecord record) {
		if (super.doExists(record)) {
			super.doUpdate(record);
		} else {
			super.doCreate(record);
		}
        return record;
	}

	@Override
	public boolean update(LinkCustomerAccountRecord record) {
		return super.doUpdate(record);	
	}
}
