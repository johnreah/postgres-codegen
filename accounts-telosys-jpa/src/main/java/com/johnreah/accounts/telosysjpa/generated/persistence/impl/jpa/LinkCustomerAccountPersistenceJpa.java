/*
 * Created on 2021-11-04 ( Date ISO 2021-11-04 - Time 13:31:50 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.4.0
 */

package com.johnreah.accounts.telosysjpa.generated.persistence.impl.jpa;


import java.util.List;

import javax.inject.Named;

import com.johnreah.accounts.telosysjpa.generated.data.record.LinkCustomerAccountRecord; // "Neutral Record" class 
import com.johnreah.accounts.telosysjpa.generated.persistence.LinkCustomerAccountPersistence; // Persistence service interface
import com.johnreah.accounts.telosysjpa.generated.persistence.impl.jpa.commons.GenericJpaService;
import com.johnreah.accounts.telosysjpa.generated.persistence.impl.jpa.mapping.JpaMapper;
import com.johnreah.accounts.telosysjpa.generated.persistence.impl.jpa.mapping.JpaMapping;

import com.johnreah.accounts.telosysjpa.generated.persistence.impl.jpa.record.LinkCustomerAccountJpaRecord; // "JPA Record" class (with JPA mapping) 
import com.johnreah.accounts.telosysjpa.generated.persistence.impl.jpa.record.LinkCustomerAccountJpaRecordKey;

/**
 * LinkCustomerAccount persistence service - JPA implementation 
 * 
 * @author Telosys 
 *
 */
@Named("LinkCustomerAccountPersistence")
public class LinkCustomerAccountPersistenceJpa extends GenericJpaService<LinkCustomerAccountJpaRecord, LinkCustomerAccountJpaRecordKey> implements LinkCustomerAccountPersistence {

	private final JpaMapper<LinkCustomerAccountJpaRecord,LinkCustomerAccountRecord> mapper = JpaMapping.getMapperProvider().getMapper(LinkCustomerAccountJpaRecord.class,LinkCustomerAccountRecord.class);

	/**
	 * Constructor
	 */
	public LinkCustomerAccountPersistenceJpa() {
		super(LinkCustomerAccountJpaRecord.class);
	}

	@Override
	public LinkCustomerAccountRecord findById( Long customerId, Long accountId ) {
		// Build the composite key
		LinkCustomerAccountJpaRecordKey key = new LinkCustomerAccountJpaRecordKey( customerId, accountId );
		LinkCustomerAccountJpaRecord entity = super.find( key );
		return mapper.mapEntityToRecord(entity);	
	}

	@Override
	public List<LinkCustomerAccountRecord> findAll() {
		List<LinkCustomerAccountJpaRecord> entities = super.loadAll() ;
		List<LinkCustomerAccountRecord> records = new java.util.LinkedList<LinkCustomerAccountRecord>();
		for ( LinkCustomerAccountJpaRecord entity : entities ) {
			records.add( mapper.mapEntityToRecord(entity) ) ;
		}
		return records ;
	}

	@Override
	public LinkCustomerAccountRecord create(LinkCustomerAccountRecord record) {
		LinkCustomerAccountJpaRecord entity = mapper.mapRecordToEntity(record);
		super.persist(entity);
		return record ;
	}
	
	@Override
	public boolean update(LinkCustomerAccountRecord record) {
		// Build the composite key
		LinkCustomerAccountJpaRecordKey pk = new LinkCustomerAccountJpaRecordKey( record.getCustomerId(), record.getAccountId() );
		if ( super.find( pk ) != null ) {
			// Exists => 'merge' 
			LinkCustomerAccountJpaRecord entity = mapper.mapRecordToEntity(record);
			super.merge(entity);
			return true ;
		}
		else {
			return false;
		}
	}

	@Override
	public LinkCustomerAccountRecord save(LinkCustomerAccountRecord record) {
		LinkCustomerAccountJpaRecord entity = mapper.mapRecordToEntity(record);
		super.merge(entity);
		return record ;
	}

	@Override
	public boolean deleteById( Long customerId, Long accountId ) {
		// Build the composite key
		LinkCustomerAccountJpaRecordKey key = new LinkCustomerAccountJpaRecordKey( customerId, accountId );
		return super.remove( key );
	}

	@Override
	public boolean delete(LinkCustomerAccountRecord record) {
		if ( record != null ) {
			// Build the composite key
			LinkCustomerAccountJpaRecordKey key = new LinkCustomerAccountJpaRecordKey( record.getCustomerId(), record.getAccountId() );
			return super.remove( key );
		}
		return false ;
	}

	@Override
	public long countAll() {
		Long count = (Long) super.execNamedQueryWithSingleResult( buildQueryName("countAll") ) ;
		return count.longValue();
	}

	public long countById(Long customerId, Long accountId) {
		Long count = (Long) super.execNamedQueryWithSingleResult( buildQueryName("countById"), customerId, accountId ) ;
		return count.longValue();
	}
	
	@Override
	public boolean exists(Long customerId, Long accountId) {
		long count = countById(customerId, accountId) ;
		return count > 0 ;
	}


	@Override
	public boolean exists(LinkCustomerAccountRecord record) {
		if ( record != null ) {
			return exists( record.getCustomerId(), record.getAccountId() );
		}
		return false ;
	}

	@SuppressWarnings("unchecked")
	public List<LinkCustomerAccountJpaRecord> queryExample() {
		List<?> list = super.execNamedQuery(buildQueryName("theNamedQueryToBeUsed")) ;
		return (List<LinkCustomerAccountJpaRecord>) list ;
	}

}
