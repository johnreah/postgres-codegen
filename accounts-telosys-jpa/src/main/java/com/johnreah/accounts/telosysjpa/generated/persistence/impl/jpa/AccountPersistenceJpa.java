/*
 * Created on 2021-11-04 ( Date ISO 2021-11-04 - Time 13:31:50 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.4.0
 */

package com.johnreah.accounts.telosysjpa.generated.persistence.impl.jpa;


import java.util.List;

import javax.inject.Named;

import com.johnreah.accounts.telosysjpa.generated.data.record.AccountRecord; // "Neutral Record" class 
import com.johnreah.accounts.telosysjpa.generated.persistence.AccountPersistence; // Persistence service interface
import com.johnreah.accounts.telosysjpa.generated.persistence.impl.jpa.commons.GenericJpaService;
import com.johnreah.accounts.telosysjpa.generated.persistence.impl.jpa.mapping.JpaMapper;
import com.johnreah.accounts.telosysjpa.generated.persistence.impl.jpa.mapping.JpaMapping;

import com.johnreah.accounts.telosysjpa.generated.persistence.impl.jpa.record.AccountJpaRecord; // "JPA Record" class (with JPA mapping) 

/**
 * Account persistence service - JPA implementation 
 * 
 * @author Telosys 
 *
 */
@Named("AccountPersistence")
public class AccountPersistenceJpa extends GenericJpaService<AccountJpaRecord, Long> implements AccountPersistence {

	private final JpaMapper<AccountJpaRecord,AccountRecord> mapper = JpaMapping.getMapperProvider().getMapper(AccountJpaRecord.class,AccountRecord.class);

	/**
	 * Constructor
	 */
	public AccountPersistenceJpa() {
		super(AccountJpaRecord.class);
	}

	@Override
	public AccountRecord findById( Long id ) {
		AccountJpaRecord entity = super.find( id );
		return mapper.mapEntityToRecord(entity);	
	}

	@Override
	public List<AccountRecord> findAll() {
		List<AccountJpaRecord> entities = super.loadAll() ;
		List<AccountRecord> records = new java.util.LinkedList<AccountRecord>();
		for ( AccountJpaRecord entity : entities ) {
			records.add( mapper.mapEntityToRecord(entity) ) ;
		}
		return records ;
	}

	@Override
	public AccountRecord create(AccountRecord record) {
		AccountJpaRecord entity = mapper.mapRecordToEntity(record);
		super.persist(entity);
		// Auto-incremented key : set the generated id in the original record
		record.setId( entity.getId() ) ;
		//record.setId(entity.getId());
		return record ;
	}
	
	@Override
	public boolean update(AccountRecord record) {
		Long pk = record.getId() ;
		if ( super.find( pk ) != null ) {
			// Exists => 'merge' 
			AccountJpaRecord entity = mapper.mapRecordToEntity(record);
			super.merge(entity);
			return true ;
		}
		else {
			return false;
		}
	}

	@Override
	public AccountRecord save(AccountRecord record) {
		AccountJpaRecord entity = mapper.mapRecordToEntity(record);
		super.merge(entity);
		return record ;
	}

	@Override
	public boolean deleteById( Long id ) {
		return super.remove( id );
	}

	@Override
	public boolean delete(AccountRecord record) {
		if ( record != null ) {
			return super.remove( record.getId() );
		}
		return false ;
	}

	@Override
	public long countAll() {
		Long count = (Long) super.execNamedQueryWithSingleResult( buildQueryName("countAll") ) ;
		return count.longValue();
	}

	public long countById(Long id) {
		Long count = (Long) super.execNamedQueryWithSingleResult( buildQueryName("countById"), id ) ;
		return count.longValue();
	}
	
	@Override
	public boolean exists(Long id) {
		long count = countById(id) ;
		return count > 0 ;
	}


	@Override
	public boolean exists(AccountRecord record) {
		if ( record != null ) {
			return exists( record.getId() );
		}
		return false ;
	}

	@SuppressWarnings("unchecked")
	public List<AccountJpaRecord> queryExample() {
		List<?> list = super.execNamedQuery(buildQueryName("theNamedQueryToBeUsed")) ;
		return (List<AccountJpaRecord>) list ;
	}

}
