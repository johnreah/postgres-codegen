package com.johnreah.accounts.hibernate_ormlite;

import com.j256.ormlite.jdbc.JdbcPooledConnectionSource;
import com.j256.ormlite.support.ConnectionSource;
import com.johnreah.accounts.hibernate.generated.AccountType;

import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * Example of a transactional service invoking multiple DAOs using entities generated by Hibernate Tools
 * and DAOs generated by ORMLite.
 * For:
 * - No need to learn JEE, Spring or Hibernate.
 * - Database-first design. Code generation is restricted to entities, and DAOs are created at run-time.
 * - Intuitive for SQL developers. No write-behind cacheing or object lifecycle to worry about.
 * - Transaction management is encapsulated in ORMLite's TransactionManager and can be applied where the developer chooses.
 * Against:
 * - ORMLite functionality is limited in some areas (no support for many-to-many)
 */
public class App_ORMLite {

    public static void main(String[] args) throws ClassNotFoundException, SQLException, InterruptedException {
        new App_ORMLite().run();
    }

    private final String JDBC_URL = "jdbc:postgresql://localhost:5432/accounts_hibernate";
    private final String JDBC_USER = "postgres";
    private final String JDBC_PASSWORD = "postgres";

    private ConnectionSource connectionSource;
    private BankingService bankingService;

    private void run() throws ClassNotFoundException, SQLException, InterruptedException {
        Class.forName("org.postgresql.Driver");

        connectionSource = new JdbcPooledConnectionSource(JDBC_URL, JDBC_USER, JDBC_PASSWORD);
        bankingService = new BankingService(connectionSource);

        bankingService.deleteEverything();
        System.out.println("Customers at start: " + bankingService.countCustomers());

        bankingService.createAccountType("Current account", "CURRENT");
        bankingService.createAccountType("Deposit account", "DEPOSIT");
        bankingService.listAccountTypes().forEach((AccountType accountType) -> System.out.println(accountType.getDescription()));

        bankingService.createBankingCustomerWithAccounts("John", "Reah", "john.reah+" + new SimpleDateFormat("yyyyMMdd-hhmmss").format(new Date()) + "@demo.com");

        Thread.sleep(500);
        System.out.println("Customers at end: " + bankingService.countCustomers());
        System.out.println("Accounts at end: " + bankingService.countAccounts());
        bankingService.listCustomers().forEach(c -> System.out.println(c.getEmail()));
    }

}